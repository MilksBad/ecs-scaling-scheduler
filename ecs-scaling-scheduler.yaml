### 
# Full yaml file including the lambda for stopping and starting services, 
# the cloudwatch alarms to trigger lambda during off office times,
# s3 container to 
# and IAM roles for the right permissions
###

Parameters:
  ProjectName:
    Description: Standard Name identifying project
    Type: String
  EnvName:
    Description: Name of the environment
    Type: String
  Codebucket:
    Type: String
    Description: Bucket where the python code for lambda is saved
  CodeKey:
    Type: String
    Description: The S3 object key
    Default: "lambda_function.zip"
  EcsFullPermissionRole:
    Type: String
    Description: ARN of the AWS managed IAM Role for ECS Full Access permissions e.g arn:aws:iam::aws:policy/AmazonECS_FullAccess
    Default: "arn:aws:iam::aws:policy/AmazonECS_FullAccess"
  ClusterName:
    Type: String
    Description: Name of the ECS Cluster



Resources:
  ScalingLambda:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref Codebucket
        S3Key: !Ref CodeKey
      Description: Sets all ECS services desired count to 0 or 1
      FunctionName: !Sub '${ProjectName}-${EnvName}-ScalingLambda'
      Handler: 'lambda_function.lambda_handler'
      Role: !GetAtt LambdaIamRole.Arn
      Runtime: 'python3.8'
      Timeout: 30
    DependsOn: LambdaRolePolicy

  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: IAM Role for scaling Lambda
      ManagedPolicyArns:
        - !Ref EcsFullPermissionRole
      RoleName: !Sub '${ProjectName}-${EnvName}-ScalingLambdaIamRole'

  LambdaRolePolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'ec2:CreateNetworkInterface'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DescribeNetworkInterfaces'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: '*'        
      PolicyName: !Sub '${ProjectName}-${EnvName}-ScalingLambdaIamPolicy'
      Roles: 
        - !Ref LambdaIamRole
    DependsOn: LambdaIamRole

  StartEcsServicesRuleCloudwatch:
    Type: AWS::Events::Rule
    Properties: 
      Description: Starts at 1200 UTC on Monday - Friday | Starts at 0800 EDT on Monday - Friday | Starts at 0700 EST on Monday - Friday
      Name: !Sub '${ProjectName}-${EnvName}-StartEcsServicesRule'
      ScheduleExpression: 'cron(0 12 ? * MON-FRI *)'
      State: ENABLED
      Targets:  
        - Arn: !GetAtt ScalingLambda.Arn
          Input: !Sub '{"action": "start", "cluster": "${ClusterName}"}'
          Id: startLambda
    DependsOn: ScalingLambda

  EventBridgeLambdaPermissionStart:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ScalingLambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt StartEcsServicesRuleCloudwatch.Arn

  StopEcsServicesRuleCloudwatch:
    Type: AWS::Events::Rule
    Properties: 
      Description: Stops at 1 am on Tuesday - Sat UTC | Stops at 2100 EDT on Monday - Friday | Stops at 2000 EST on Monday - Friday
      Name: !Sub '${ProjectName}-${EnvName}-StopEcsServicesRule'
      ScheduleExpression: 'cron(0 01 ? * Tue-Sat *)'
      State: ENABLED
      Targets: 
        - Arn: !GetAtt ScalingLambda.Arn
          Input: !Sub '{"action": "stop", "cluster": "${ClusterName}"}'
          Id: stopLambda
    DependsOn: ScalingLambda

  EventBridgeLambdaPermissionStop:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ScalingLambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt StopEcsServicesRuleCloudwatch.Arn