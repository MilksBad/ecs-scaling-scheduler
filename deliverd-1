import json
import boto3

region = 'us-east-2'
instances = ['i-12345cb6de4f78g9h', 'i-08ce9b2d7eccf6d26']
db_instances_identifers = []

ec2 = boto3.client('ec2', region_name=region)
rds = boto3.client('rds')


def lambda_handler(event, context):
    ### The cloudwatch alarm sends a paramater called 'action' which is set to 'start' or 'stop'
    ### Lambda decides depending on the value whether to start or stop the container
    cloudwatchvalue = event.get('action')

    ### The cloudwatch alarm sends a paramater called 'cluster' which contains the ecs cluster name
    clusterName = event.get('cluster')


    client = boto3.client('ecs')

    ### Query to the ECS API to get all running services
    ### Output limit is currently set to 50
    try:
        response = client.list_services(
        cluster=clusterName,
        maxResults=50,
        launchType='FARGATE',
        schedulingStrategy='REPLICA'
        )
    except:
        print("didnt worked")

    ### Retrieves only the plain service arns from the output
    ### Values are stored in a list
    servicelist = response['serviceArns']
    print(servicelist)
    

    
    print(cloudwatchvalue)
    
    if 'start' == cloudwatchvalue:   #you can also and check if servicetype == ec2:
        spawncontainer(servicelist,clusterName)
        start_ec2(instances)
        start_db_instances(db_instances_identifers)
        
    elif 'stop' == cloudwatchvalue:
        stopcontainer(servicelist,clusterName)
        stop_ec2(instances)
        stop_db_instances(db_instances_identifers)


    # if "start" == cloudwatchvalue and servicetype == "ec2":
    #     start_ec2(instances)

    # if "stop" == cloudwatchvalue and servicetype == "ec2":
    #     stop_ec2(instances)

    # if "start" == cloudwatchvalue and servicetype == "db":
    #     start_db_instances(db_instances_identifers)

    # if "stop" == cloudwatchvalue and servicetype == "db:
    #     stop_db_instances(db_instances_identifers)

        
    return {
        'statusCode': 200,
        'body': json.dumps('Script finished')
        
    }
    
### Sets the desired count of tasks per service to 1
### Container will spawn after a few moments
def spawncontainer(servicearns,clusterName):
    client = boto3.client('ecs')
    for srv in servicearns:
        
        responseUpdate = client.update_service(
            cluster=clusterName,
            service=srv,
            desiredCount=1,
        )

### Sets the desired count of tasks per service to 0
### Services still runs but without any container
def stopcontainer(servicearns,clusterName):
    client = boto3.client('ecs')
    for srv in servicearns:
        
        responseUpdate = client.update_service(
            cluster=clusterName,
            service=srv,
            desiredCount=0,
        )

    
#start instances
def start_ec2(instance_ids_list):
    ec2.start_instances(InstanceIds=instance_ids_list)
    print('started your instances: ' + str(instance_ids_list))

#stop instances 
def stop_ec2(instance_ids_list):
    ec2.stop_instances(InstanceIds=instance_ids_list)
    print('stopped your instances: ' + str(instance_ids_list))

#start db instances
def start_db_instances(db_instances_identifers):
    for db_instance_identifer in db_instances_identifers:
        rds.start_db_instance(DBInstanceIdentifier=db_instance_identifer)
        print('started your DBinstances: ' + str(db_instance_identifer))

#stop db instances   
def stop_db_instances(db_instances_identifers):
    for db_instance_identifer in db_instances_identifers:
        rds.stop_db_instance(DBInstanceIdentifier=db_instance_identifer)
        print('stopped your DBinstances: ' + str(db_instance_identifer))

